{"name":"EtaMOO","tagline":"A new implementation of the LambdaMOO server","body":"\r\nImportant!\r\n==========\r\n\r\n**This is experimental and (currently) incomplete software. It is not yet\r\nusable, although with further development it is hoped that it soon will be.**\r\n\r\n_At present, all the code will do is (optionally) load a database file and\r\npresent a REPL interface for running commands and evaluating MOO code from the\r\nconsole as if you had connected as a wizard. While most MOO code will run\r\ncorrectly, there are still some built-in functions that are not yet\r\nimplemented. Also, notably, there is almost no network functionality, and no\r\nway to save any changes made to the database. Finally, there has been no\r\neffort to optimize any performance bottlenecks, of which loading a database is\r\nat least one._\r\n\r\n_Once the code is in at least a minimally useful state, this message will be\r\nupdated or removed._\r\n\r\nEtaMOO\r\n======\r\n\r\nEtaMOO is a new implementation of the LambdaMOO server written in Haskell.\r\n\r\n[LambdaMOO][] is a network-accessible, multi-user, programmable, interactive\r\nsystem well-suited to the construction of text-based adventure games,\r\nconferencing systems, and other collaborative software.\r\n\r\n  [LambdaMOO]: http://www.ipomoea.org/moo/\r\n\r\nEtaMOO differs from LambdaMOO in a few significant ways:\r\n\r\n  * EtaMOO is multi-threaded. MOO tasks run concurrently, producing network\r\n    output and changes to the database in isolated transactions that are\r\n    committed only when not in conflict with any other transaction. (In cases\r\n    of conflict, transactions are automatically retried.) Separate threads are\r\n    also used for network connection management, so for example name lookups\r\n    do not block the entire server.\r\n\r\n  * In some cases, MOO values may be computed in a \"lazy\" manner, meaning the\r\n    evaluation could be skipped if MOO code never fully inspects the result.\r\n    This could be beneficial when large list structures are returned from\r\n    built-in functions, for example.\r\n\r\n  * It is anticipated that EtaMOO will easily support 64-bit MOO integers\r\n    and/or Unicode MOO strings via independent build options.\r\n\r\n  * EtaMOO supports IPv6.\r\n\r\nThe implementation of EtaMOO closely follows the specifications of the\r\n[LambdaMOO Programmer's Manual][Programmer's Manual], and should therefore be\r\ncompatible with most LambdaMOO databases as of about version 1.8.3 of the\r\nLambdaMOO server code.\r\n\r\n  [Programmer's Manual]: http://www.ipomoea.org/moo/#progman\r\n\r\nInstalling\r\n----------\r\n\r\nEtaMOO is built with [Cabal][], the Haskell package manager. In the simplest\r\ncase, simply running:\r\n\r\n    cabal install EtaMOO\r\n\r\nshould automatically download, build, and install the `etamoo` executable\r\nafter doing the same for all of its Haskell dependencies.\r\n\r\n  [Cabal]: http://www.haskell.org/cabal/\r\n\r\nCabal itself is part of the [Haskell Platform][] which is available for many\r\ndistributions and platforms.\r\n\r\n  [Haskell Platform]: http://www.haskell.org/platform/\r\n\r\nEtaMOO has non-Haskell dependencies on two external libraries: _libpcre_ (with\r\nUTF-8 support enabled) for regular expression matching, and, possibly,\r\n_libcrypt_ (often part of the standard libraries) for the MOO `crypt()`\r\nbuilt-in function. You may need to ensure you have these available before\r\ninstalling EtaMOO.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}